csv {
	delimiter ";"
	charset   "ISO-8859-1"
	header "dataGeracao;horaGeracao;anoEleicao;numTurno;descricaoEleicao;siglaUF;siglaUE;descricaoUE;codigoCargo;descricaoCargo;nomeCandidato;sequencialCandidato;numeroCandidato;cpfCandidato;nomeUrnaCandidato;codSituacaoCandidatura;desSituacaoCandidatura;numeroPartido;siglaPartido;nomePartido;codigoLegenda;siglaLegenda;composicaoLegenda;nomeLegenda;codigoOcupacao;descricaoOcupacao;dataNascimento;numTituloEleitoralCandidato;idadeDataEleicao;codigoSexo;descricaoSexo;codGrauIntrucao;descricaoGrauInstrucao;codigoEstadoCivil;descricaoEstadoCivil;codigoCorRaca;descricaoCorRaca;codigoNacionalidade;descricaoNacionalidade;siglaUFNacimento;codigoMunicipioNascimento;nomeMunicipioNascimento;despesaMaxCampanha;codigoSitTotTurno;descricaoSitTotTurno;emailCandidato"
	null "#NULO#"
}


// Codigos integer
defineType csv.codigoOcupacao, integer {
	forbidden "-1,-3"
}
defineType csv.codigoLegenda, integer {
	forbidden "-1,-3"
}
defineType csv.codigoEstadoCivil, integer {
	forbidden "-1,-3"
}


// Informações integer
defineType csv.idadeDataEleicao, integer {
	forbidden "-1,-3"
}
defineType csv.sequencialCandidato, integer {
	forbidden "-1,-3"
}
defineType csv.numeroCandidato, integer {
	forbidden "-1,-3"
}
defineType csv.numeroPartido, integer {
	forbidden "-1,-3"
}
defineType csv.numTituloEleitoralCandidato, integer {
	forbidden "-1,-3"
}
defineType csv.despesaMaxCampanha, decimal {
	forbidden "-1,-3"
}

// Strings de descrições, nomes e demais informações
defineType csv.anoEleicao, gYear
defineType csv.nomeLegenda, string {
	forbidden "PARTIDO ISOLADO"
}

definePrefix pol,   "http://purl.org/onto/politics#"
definePrefix prop,  "http://dbpedia.org/property/"
definePrefix dbr,   "http://dbpedia.org/resource/"
definePrefix dbo,   "http://dbpedia.org/ontology/"
definePrefix foaf,  "http://xmlns.com/foaf/0.1/"
definePrefix wd,    "http://www.wikidata.org/entity/"

uriBase "http://purl.org/politics/id/"

uri partyURI,		"party",			csv.'nomePartido'
uri politicianURI,	"politician",		csv.'cpfCandidato'
uri civilStatusURI,	"civilStatus",		csv.'codigoEstadoCivil'
uri occupationURI,	"occupation",		csv.'codigoOcupacao'
uri positionURI,	"position",			csv.'codigoCargo'
uri electionURI,	csv.'anoEleicao',	"election"
uri vacancyURI,		csv.'anoEleicao', 	csv.'siglaUE',		"vacancy",			csv.'descricaoCargo'
uri candidacyURI,	csv.'anoEleicao',	csv.'siglaUF',		"candidacy", 		csv.'sequencialCandidato'
uri coalitionURI,	csv.'anoEleicao',	"coalition",		csv.'nomeLegenda'


// ESTADO CIVIL
matching(civilStatusLOD) {
	// endpoint	"https://query.wikidata.org/sparql"
	endpoint	"http://dbpedia.org/sparql"
	vendor		VIRTUOSO
	search		csv.descricaoEstadoCivil
	defaultURI	civilStatusURI
	type		pol.CivilStatus
}

map (civilStatus, civilStatusLOD) {
	rdfs.label	csv.descricaoEstadoCivil
	pol.code	csv.codigoEstadoCivil
	rdf.type	pol.CivilStatus
}


// OCUPACAO
matching(occupationLOD) {
	//endpoint	"http://purl.org/politics/triplestore"
	//endpoint	"https://query.wikidata.org/sparql"
	endpoint	"http://dbpedia.org/sparql"
	vendor		VIRTUOSO
	search		csv.descricaoOcupacao
	defaultURI	occupationURI
	type		pol.occupation
}

map (occupation, occupationLOD) {
	rdfs.label	csv.descricaoOcupacao
	pol.code	csv.codigoOcupacao
	rdf.type	pol.occupation
}


// Posiçao (Cargo concorrido)
matching(positionLOD) {
	endpoint	"http://dbpedia.org/sparql"
	vendor		VIRTUOSO
	search		csv.descricaoCargo
	defaultURI	positionURI
	type		pol.position
}

map(position, positionLOD) {
	rdfs.label	csv.descricaoCargo
	pol.code	csv.codigoCargo
}


// ELEICAO
matching(electionLOD) {
	endpoint	""
	vendor		VIRTUOSO
	search		csv.descricaoEleicao
	type		pol.election
	defaultURI	electionURI
}

map(election, electionLOD) {
	// pol.coalition	coalition
	// pol.vacancy		vacancy
	rdfs.label		csv.descricaoEleicao
	rdf.type		pol.election
	pol.year		csv.anoEleicao
}


// VAGA
matching(vacancyLOD) {
	endpoint	"http://dbpedia.org/sparql"
	vendor		VIRTUOSO
	search		csv.descricaoOcupacao
	defaultURI	vacancyURI
	type		pol.occupation
}

map(vacancy, vacancyLOD) {
	//pol.candidacy	candidacy
	pol.election	election
	pol.position	position
	rdfs.label		csv.descricaoCargo
	rdf.type		pol.vacancy
}


// TURNO
matching(turnLOD) {
	endpoint	"http://java.icmc.usp.br:2472/repositories/Politics"
	vendor		VIRTUOSO
	search		csv.numTurno
	type		pol.turn
	defaultURI	turnURI
}

map(turn, turnLOD) {
	pol.label		csv.numTurno
	pol.number		csv.numTurno
	pol.election	election
}


// PARTIDO
matching(partyLOD) {
	endpoint	"http://dbpedia.org/sparql"
	// endpoint	"https://query.wikidata.org/sparql"
	vendor		VIRTUOSO
	search		csv.nomePartido
	defaultURI	partyURI
	type		pol.party
}

map(party, partyLOD) {
	//pol.coalition		coalition
	//pol.candidacy		candidacy
	rdfs.label			csv.nomePartido
	pol.number			csv.numeroPartido
	pol.abbreviation	csv.siglaPartido
	rdf.type			pol.party
}


// LEGENDA (COLIGACAO)
// ate 2020 pode ser do partido ou da coligacao entre partidos
// feita para disputar uma determinada eleicao
matching(coalitionLOD) {
	//endpoint	"http://dbpedia.org/sparql"
	endpoint	"http://java.icmc.usp.br:2472/repositories/Politics"
	vendor		VIRTUOSO
	search		csv.nomeLegenda
	type		wd.Q124964
	defaultURI	coalitionURI
}

map(coalition, coalitionLOD) {
	rdfs.label			csv.nomeLegenda
	pol.internalNumber	csv.codigoLegenda
	pol.coalition		csv.composicaoLegenda
	rdf.type			wd.Q124964
	pol.party			party
	pol.election		election
	// pol.candidacy		candidacy
}


// CANDIDATO (Politico)
matching(politicianLOD) {
	endpoint	"http://java.icmc.usp.br:2472/repositories/Politics"
	vendor		VIRTUOSO
	search		csv.nomeCandidato
	type		pol.politician
	defaultURI	politicianURI
}

map(politician, politicianLOD) {
	//pol.candidacy				candidacy
	rdfs.label					csv.nomeCandidato
	foaf.name					csv.nomeCandidato
	pol.voterNumber				csv.numTituloEleitoralCandidato
	foaf.mbox					csv.emailCandidato
	pol.cpf						csv.cpfCandidato
	pol.birthday				csv.dataNascimento
	dbo.hometown				csv.nomeMunicipioNascimento
	pol.citizenshipDescription	csv.descricaoNacionalidade
	wd.Q3254959					csv.descricaoCorRaca
	rdf.type					pol.politician
}


// CANDIDATURA
matching(candidacyLOD){
endpoint	"http://purl.org/politics/triplestore/Politics"
// endpoint	"http://dbpedia.org/sparql"
vendor		VIRTUOSO
search		csv.sequencialCandidato
defaultURI	candidacyURI
type		pol.candidacy
}

map (candidacy, candidacyLOD) {
pol.civilStatus					civilStatus
pol.occupation					occupation
pol.politician					politician
pol.vacancy						vacancy
pol.turn						turn
pol.party						party
pol.coalition					coalition
rdfs.label						csv.nomeUrnaCandidato
pol.internalNumber				csv.sequencialCandidato
pol.electionName				csv.nomeUrnaCandidato
pol.number						csv.numeroCandidato
pol.candidacySituation			csv.desSituacaoCandidatura
pol.age							csv.idadeDataEleicao
pol.schooling					csv.descricaoGrauInstrucao
pol.partyMaxCampaignExpenses	csv.despesaMaxCampanha
rdf.type						pol.candidacy
}
